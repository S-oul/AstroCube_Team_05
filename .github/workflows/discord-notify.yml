name: Notify Discord on every push

on:
  push: {}   # toutes les branches, tous les push

jobs:
  notify:
    if: ${{ github.event.deleted != true }}  # ignore les suppressions de branches/tags
    runs-on: ubuntu-latest

    steps:
      - name: Build Discord payload
        id: build
        shell: bash
        run: |
          set -euo pipefail

          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          PUSHER="${{ github.actor }}"
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.event.after }}"
          COMPARE_URL="https://github.com/${REPO}/compare/${BEFORE}...${AFTER}"

          # Stocke l'événement GitHub brut sans casser les quotes/apostrophes
          EVENT_JSON_FILE="$(mktemp)"
          cat > "$EVENT_JSON_FILE" <<'JSON'
          ${{ toJson(github.event) }}
          JSON

          # Liste lisible des commits (max 15 lignes)
          COMMITS_BLOCK="$(jq -r '
              .commits // [] |
              map(
                "- [`" + (.id[0:7]) + "`](" + .url + ") — **" +
                ((.author.username // .author.name // "unknown")) + "**: " +
                ((.message // "") | gsub("\r";"") | split("\n")[0])
              )[:15] | join("\n")
            ' "$EVENT_JSON_FILE")"

          if [ -z "$COMMITS_BLOCK" ]; then
            COMMITS_BLOCK="(aucun détail de commit disponible pour cet événement)"
          fi

          # Tronque prudemment pour Discord (limite de description des embeds ~4096 chars)
          MAX=4000
          if [ "${#COMMITS_BLOCK}" -gt "$MAX" ]; then
            COMMITS_BLOCK="${COMMITS_BLOCK:0:$MAX}\n…"
          fi

          # Timestamp si dispo
          TS="$(jq -r '.head_commit.timestamp // empty' "$EVENT_JSON_FILE")"

          # Construit l’embed
          PAYLOAD="$(jq -n \
            --arg repo     "$REPO" \
            --arg branch   "$BRANCH" \
            --arg pusher   "$PUSHER" \
            --arg compare  "$COMPARE_URL" \
            --arg desc     "$COMMITS_BLOCK" \
            --arg ts       "$TS" \
            '{
              username: "GitHub Bot",
              embeds: [{
                title: "[" + $repo + "] push sur " + $branch,
                url: $compare,
                description: $desc,
                footer: { text: "Pushed by " + $pusher },
                color: 5814783
              }]
            } | if ($ts|length)>0 then
                .embeds[0].timestamp = $ts
              else .
              end
            ')"

          {
            echo 'payload<<__JSON__'
            echo "$PAYLOAD"
            echo '__JSON__'
          } >> "$GITHUB_OUTPUT"

      - name: Send to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "Secret DISCORD_WEBHOOK_URL manquant." >&2
            exit 1
          fi
          curl -sS -H "Content-Type: application/json" \
               -d '${{ steps.build.outputs.payload }}' \
               "$DISCORD_WEBHOOK_URL"
