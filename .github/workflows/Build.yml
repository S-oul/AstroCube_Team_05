name: Build project

on:
  push:
    branches:
      - main
      - Dev

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - name: Define build type
        id: build_type
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == "Dev" ]]; then
            echo "BUILD_TYPE=Dev Build" >> $GITHUB_ENV
            echo "BUILD_NAME=Dev-Build-${{ matrix.targetPlatform }}" >> $GITHUB_ENV
          else
            echo "BUILD_TYPE=Release Build" >> $GITHUB_ENV
            echo "BUILD_NAME=Build-${{ matrix.targetPlatform }}" >> $GITHUB_ENV
          fi

      - name: Clean up any globalgamemanager files
        shell: bash
        run: |
          echo "Removing globalgamemanager files..."
          find . -iname "globalgamemanager*" -exec rm -f {} \; || true

      - name: Setup Wwise SDK
        uses: mashizora/setup-wwise@main
        with:
          wwise-version: 2024.1
          email: ${{ secrets.WWISE_EMAIL }}
          password: ${{ secrets.WWISE_PASSWORD }}

      - name: Ensure Unity Cache Directory
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "C:/Users/ContainerAdministrator/AppData/Local/Unity/Caches"

      - name: Build with Unity
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          WWISESDK: ${{ env.WWISESDK }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_NAME }}
          path: build/${{ matrix.targetPlatform }}

      - name: Send Discord notification on success
        if: success()
        shell: bash
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"Build Bot\",\"embeds\": [{\"title\": \"✅ ${{ env.BUILD_TYPE }} Succeeded!\",\"description\": \"Build for **${{ matrix.targetPlatform }}** is complete on branch **${{ github.ref_name }}**.\",\"color\": 3066993,\"fields\": [{\"name\": \"Download\",\"value\": \"[Click here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}]}]}" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"

      - name: Send Discord notification on failure
        if: failure()
        shell: bash
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"Build Bot\",\"embeds\": [{\"title\": \"❌ ${{ env.BUILD_TYPE }} Failed!\",\"description\": \"Build for **${{ matrix.targetPlatform }}** failed on branch **${{ github.ref_name }}**.\",\"color\": 15158332,\"fields\": [{\"name\": \"Check logs\",\"value\": \"[View details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}]}]}" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"
